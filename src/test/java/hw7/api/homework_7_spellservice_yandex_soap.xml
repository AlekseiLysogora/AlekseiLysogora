<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="cc87e990-2783-4c3c-897d-05e2bf5f0503" activeEnvironment="Default" name="homework_7" resourceRoot="" soapui-version="5.6.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="aa055327-46fe-4601-ad15-5876a7fc9359" wsaVersion="NONE" name="SpellServiceSoap" type="wsdl" bindingName="{http://speller.yandex.net/services/spellservice}SpellServiceSoap" soapVersion="1_1" anonymous="optional" definition="https://speller.yandex.net/services/spellservice?WSDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="https://speller.yandex.net/services/spellservice?WSDL"><con:part><con:url>https://speller.yandex.net/services/spellservice?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://speller.yandex.net/services/spellservice" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://speller.yandex.net/services/spellservice" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://speller.yandex.net/services/spellservice">
      <s:element name="CheckTextRequest">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="text" type="s:string"/>
          </s:sequence>
          <s:attribute name="lang" type="s:string"/>
          <s:attribute name="options" type="s:int" use="optional" default="0"/>
          <s:attribute name="format" type="s:string" use="optional" default=""/>
        </s:complexType>
      </s:element>
      <s:element name="CheckTextResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="SpellResult" type="tns:SpellResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:complexType name="SpellResult">
        <s:sequence>
          <s:element minOccurs="0" maxOccurs="unbounded" name="error" type="tns:SpellError"/>
        </s:sequence>
      </s:complexType>
      <s:complexType name="SpellError">
        <s:sequence>
          <s:element minOccurs="1" maxOccurs="1" name="word" type="s:string"/>
          <s:element minOccurs="0" maxOccurs="unbounded" name="s" type="s:string"/>
        </s:sequence>
        <s:attribute name="code" type="s:int" use="required"/>
        <s:attribute name="pos" type="s:int" use="required"/>
        <s:attribute name="row" type="s:int" use="required"/>
        <s:attribute name="col" type="s:int" use="required"/>
        <s:attribute name="len" type="s:int" use="required"/>
      </s:complexType>
      <s:element name="CheckTextsRequest">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="unbounded" name="text" type="s:string"/>
          </s:sequence>
          <s:attribute name="lang" type="s:string"/>
          <s:attribute name="options" type="s:int" use="optional" default="0"/>
          <s:attribute name="format" type="s:string" use="optional" default=""/>
        </s:complexType>
      </s:element>
      <s:element name="CheckTextsResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="1" maxOccurs="1" name="ArrayOfSpellResult" type="tns:ArrayOfSpellResult"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:complexType name="ArrayOfSpellResult">
        <s:sequence>
          <s:element minOccurs="0" maxOccurs="unbounded" name="SpellResult" type="tns:SpellResult"/>
        </s:sequence>
      </s:complexType>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="checkTextSoapIn">
    <wsdl:part name="parameters" element="tns:CheckTextRequest"/>
  </wsdl:message>
  <wsdl:message name="checkTextSoapOut">
    <wsdl:part name="parameters" element="tns:CheckTextResponse"/>
  </wsdl:message>
  <wsdl:message name="checkTextsSoapIn">
    <wsdl:part name="parameters" element="tns:CheckTextsRequest"/>
  </wsdl:message>
  <wsdl:message name="checkTextsSoapOut">
    <wsdl:part name="parameters" element="tns:CheckTextsResponse"/>
  </wsdl:message>
  <wsdl:portType name="SpellServiceSoap">
    <wsdl:operation name="checkText">
      <wsdl:input message="tns:checkTextSoapIn"/>
      <wsdl:output message="tns:checkTextSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <wsdl:input message="tns:checkTextsSoapIn"/>
      <wsdl:output message="tns:checkTextsSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SpellServiceSoap" type="tns:SpellServiceSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="checkText">
      <soap:operation soapAction="http://speller.yandex.net/services/spellservice/checkText" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <soap:operation soapAction="http://speller.yandex.net/services/spellservice/checkTexts" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="SpellServiceSoap12" type="tns:SpellServiceSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="checkText">
      <soap12:operation soapAction="http://speller.yandex.net/services/spellservice/checkText" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="checkTexts">
      <soap12:operation soapAction="http://speller.yandex.net/services/spellservice/checkTexts" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SpellService">
    <wsdl:port name="SpellServiceSoap" binding="tns:SpellServiceSoap">
      <soap:address location="http://speller.yandex.net/services/spellservice"/>
    </wsdl:port>
    <wsdl:port name="SpellServiceSoap12" binding="tns:SpellServiceSoap12">
      <soap12:address location="http://speller.yandex.net/services/spellservice"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint></con:endpoints><con:operation id="78b76bd3-1d60-440a-8783-a55cd36f3da6" isOneWay="false" action="http://speller.yandex.net/services/spellservice/checkText" name="checkText" bindingOperationName="checkText" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="7ff8f8a0-1b8a-4e2d-8985-d7b9d5d84161" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="ru" options="2" format="">\r
         <spel:text>авп17ч4534 Россxия</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkText"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="41fd4374-3c1e-4ff3-82a3-4961423f481a" isOneWay="false" action="http://speller.yandex.net/services/spellservice/checkTexts" name="checkTexts" bindingOperationName="checkTexts" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9e533a6d-6f1a-466d-845b-0a316d235668" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextsRequest lang="en" options="0" format="">\r
         <!--Zero or more repetitions:-->\r
         <spel:text>I flew to to Cyprus</spel:text>\r
      </spel:CheckTextsRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://speller.yandex.net/services/spellservice/checkTexts"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite id="ca99f04f-d05d-46f3-a396-43db2da0f23b" name="readFromFile_TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0ff0face-9d6b-4385-b499-9393f94132b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CheckOptionERROR_UNKNOWN_WORD_TestCase" searchProperties="true"><con:description>
Precondition: 
All property's elements contained in the source file, located with the project xml file.

Title:
CheckOptionERROR_UNKNOWN_WORD_TestCase

Steps:
1. Get data from the source file through Groovy script.
2. Write each received property's pieces to the particular field in test case's property.
3. Perform a comparison with the expected result received from the source property file.

Expected result:
Comparison is responded to the expected result from the source file.

Postcondition:
Clean test case's property space.</con:description><con:settings/><con:testStep type="groovy" name="Groovy Script" id="67efad00-511f-45e4-9b42-7154b80b5dc4"><con:settings/><con:config><script>import jxl.* // import Java Excel API library
def TestCase = context.testCase

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

File file = new File(projectDir)
def firstLevelDir = file.getParent()
def filePath = firstLevelDir + "\\SourceDataFile\\" + "CheckOptionERROR_UNKNOWN_WORD_TestCase.xls"

def count
Workbook WorkBook1 = Workbook.getWorkbook(new File(filePath))
Sheet Sheet1 = WorkBook1.getSheet(0)
PropertiesTestStep = TestCase.getTestStepByName("Properties")
count = PropertiesTestStep.getPropertyValue("Counter").toInteger()

//If Total records is unknown (at start), get the rowcount from Excel
if (PropertiesTestStep.getPropertyValue("Total").toString() == "")
    PropertiesTestStep.setPropertyValue("Total", Sheet1.getRows().toString())
count++

//Read the Excel test data
Cell Field1 = Sheet1.getCell(0, count)
Cell Field2 = Sheet1.getCell(1, count)
log.info ("Count is " + count.toString() + " InputText : " + Field1.getContents() + " ExpectedResult : " + Field2.getContents())
WorkBook1.close()

//Copy the Excel test data to properties in Properties test step
PropertiesTestStep.setPropertyValue("InputText", Field1.getContents())
PropertiesTestStep.setPropertyValue("ExpectedResult", Field2.getContents())
PropertiesTestStep.setPropertyValue("Counter", count.toString())
if (count == PropertiesTestStep.getPropertyValue("Total").toInteger() - 1)
    PropertiesTestStep.setPropertyValue("End", "True")</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="5ac093dc-666e-4c30-9527-2d48dde6acda"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Counter</con:name><con:value>0</con:value></con:property><con:property><con:name>InputText</con:name><con:value/></con:property><con:property><con:name>ExpectedResult</con:name><con:value/></con:property><con:property><con:name>Total</con:name><con:value/></con:property><con:property><con:name>End</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="ERROR_UNKNOWN_WORD" id="f6fad308-a266-40a3-86b5-0f193306106d"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="ERROR_UNKNOWN_WORD" id="8d0308b0-2521-4a47-af4f-447c9eb45500"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">
   <soapenv:Header/>
   <soapenv:Body>
      <spel:CheckTextRequest lang="${#Global#lang}" options="${#TestCase#options}" format="">
         <spel:text>${Properties#InputText}</spel:text>
      </spel:CheckTextRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="e6e9a54b-a06f-44bf-b287-891210784cf9"/><con:assertion type="Simple NotContains" id="8167f1c7-cb7b-44f2-93ac-71b41a0a7962" name="Not Contains"><con:configuration><token>Eng</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="62ec83e8-c834-4465-84f4-17abe9024702" name="assertionTag"><con:configuration><scriptText>def expected = context.expand('${Properties#ExpectedResult}')

def xmlObjResp = new XmlSlurper().parseText(messageExchange.getResponseContent())

def actual = xmlObjResp.Body.CheckTextResponse.SpellResult.error.s

//log.info actual
//log.info expected

assert actual == expected
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script loop" id="878956ea-faa7-4661-8ade-dfbd2bb81356"><con:settings/><con:config><script>def TestCase = context.testCase
PropertiesTestStep = TestCase.getTestStepByName("Properties")
Stop = PropertiesTestStep.getPropertyValue("End").toString()
if (Stop=="True")
    log.info("Exit Groovy Script - DataLoop")
else
    testRunner.gotoStepByName("Groovy Script")</script></con:config></con:testStep><con:setupScript/><con:tearDownScript>
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("Counter", "0")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("InputText", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("ExpectedResult", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("Total", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("End", "")</con:tearDownScript><con:properties><con:property><con:name>options</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="82fd1df5-cb00-4e06-b920-da46d4885c36" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CheckOptionERROR_CAPITALIZATION_TestCase" searchProperties="true"><con:description>
Precondition: 
All property's elements contained in the source file, located with the project xml file.

Title:
CheckOptionERROR_CAPITALIZATION_TestCase

Steps:
1. Get data from the source file through Groovy script.
2. Write each received property's pieces to the particular field in test suite's property.
3. Perform a comparison with the expected result received from the source property file.

Expected result:
Comparison is responded to the expected result from the source file.

Postcondition:
Clean test suite's property space.</con:description><con:settings/><con:testStep type="groovy" name="Groovy Script" id="9ca56351-0d38-4be6-af70-0ba98e39eb20"><con:settings/><con:config><script>import jxl.* // import Java Excel API library
def TestCase = context.testCase

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath

File file = new File(projectDir)
def firstLevelDir = file.getParent()
def filePath = firstLevelDir + "\\SourceDataFile\\" + "CheckOptionERROR_CAPITALIZATION_TestCase.xls"

def count
Workbook WorkBook1 = Workbook.getWorkbook(new File(filePath))
Sheet Sheet1 = WorkBook1.getSheet(0)
PropertiesTestStep = TestCase.getTestStepByName("Properties")
count = PropertiesTestStep.getPropertyValue("Counter").toInteger()

//If Total records is unknown (at start), get the rowcount from Excel
if (PropertiesTestStep.getPropertyValue("Total").toString() == "")
    PropertiesTestStep.setPropertyValue("Total", Sheet1.getRows().toString())
count++

//Read the Excel test data
Cell Field1 = Sheet1.getCell(0, count)
Cell Field2 = Sheet1.getCell(1, count)
log.info ("Count is " + count.toString() + " InputText : " + Field1.getContents() + " ExpectedResult : " + Field2.getContents())
WorkBook1.close()

//Copy the Excel test data to properties in Properties test step
PropertiesTestStep.setPropertyValue("InputText", Field1.getContents())
PropertiesTestStep.setPropertyValue("ExpectedResult", Field2.getContents())
PropertiesTestStep.setPropertyValue("Counter", count.toString())
if (count == PropertiesTestStep.getPropertyValue("Total").toInteger() - 1)
    PropertiesTestStep.setPropertyValue("End", "True")</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="f6a59caa-d3b4-4021-829d-6edf772c8137"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Counter</con:name><con:value>0</con:value></con:property><con:property><con:name>InputText</con:name><con:value/></con:property><con:property><con:name>ExpectedResult</con:name><con:value/></con:property><con:property><con:name>Total</con:name><con:value/></con:property><con:property><con:name>End</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="ERROR_CAPITALIZATION" id="db0c70e5-d58e-479c-9d55-8b4d35110269"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="ERROR_CAPITALIZATION" id="c3b14664-d3ae-48dd-ae7f-133513be7104"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">
   <soapenv:Header/>
   <soapenv:Body>
      <spel:CheckTextRequest lang="${#Global#lang}" options="${#TestSuite#options}" format="">
         <spel:text>${Properties#InputText}</spel:text>
      </spel:CheckTextRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6985abec-51f3-4782-a6a6-99584457227b"/><con:assertion type="GroovyScriptAssertion" id="2c3b0768-b6a6-424f-a391-c58bd64bd0e6" name="Script Assertion"><con:configuration><scriptText>def expected = context.expand('${Properties#ExpectedResult}')

def xmlObjResp = new XmlSlurper().parseText(messageExchange.getResponseContent())

def actual = xmlObjResp.Body.CheckTextResponse.SpellResult.error.s

//log.info actual
//log.info expected

assert actual == expected
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script loop" id="8e62610f-93fc-4917-9bbe-c9f3ac6a0a42"><con:settings/><con:config><script>def TestCase = context.testCase
PropertiesTestStep = TestCase.getTestStepByName("Properties")
Stop = PropertiesTestStep.getPropertyValue("End").toString()
if (Stop=="True")
    log.info("Exit Groovy Script - DataLoop")
else
    testRunner.gotoStepByName("Groovy Script")</script></con:config></con:testStep><con:tearDownScript>//Clear property space
//testRunner.testCase.testSuite.removeProperty("options")
//testRunner.testCase.testSuite.removeProperty("inputText")
//testRunner.testCase.testSuite.removeProperty("expectedResult")


//context.fileReader.close()


testRunner.testCase.getTestStepByName("Properties").setPropertyValue("Counter", "0")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("InputText", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("ExpectedResult", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("Total", "")
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("End", "")</con:tearDownScript><con:properties/></con:testCase><con:properties><con:property><con:name>options</con:name><con:value>3</con:value></con:property></con:properties></con:testSuite><con:testSuite id="adfb8946-13e2-4cf9-aeb2-48fe224a0685" name="readFromSaopfile_TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2e1ed8f2-9ad3-41ad-84d5-8a1c7fdddf70" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ServiceReturnCorrectWord_TestCase" searchProperties="true"><con:description>
Precondition: 
All property's elements contained in the source file, located with the project xml file.

Title:
ServiceReturnCorrectWord_TestCase

Steps:
1. Get data from the source file through Groovy script.
2. Write each received property's pieces to the particular field in test glabal's and project's property.
3. Perform a comparison with the expected result received from the source property file.

Expected result:
Comparison is responded to the expected result from the source file.

Postcondition:
Clean test glabal's and project's property space.</con:description><con:settings/><con:testStep type="request" name="checkWord" id="ec9a86fe-1d8b-4649-af16-848517c622e1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="checkWord" id="5393686a-1a35-42fb-b55d-c3a4c2b83ec0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest>\r
         <spel:text>${#Project#inputText}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="0e7a8f99-8452-457e-a87b-22f4819a3637"/><con:assertion type="XPath Match" id="1ddccd90-5a30-4c5b-b713-526ffeddb5cb" name="matchTag_S"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://speller.yandex.net/services/spellservice';

//ns1:SpellResult</path><content><![CDATA[<SpellResult xmlns="http://speller.yandex.net/services/spellservice" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <error code="1" pos="0" row="0" col="0" len="5">
    <word>Helli</word>
    <s>${#Project#expectedResult}</s>
    <s>Hell</s>
  </error>
</SpellResult>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:tearDownScript/><con:properties/></con:testCase><con:testCase id="15d1dc72-1096-4ab0-b56b-c946570552f6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CheckOptionIGNORE_DIGITS_TestCase" searchProperties="true"><con:description>
Precondition: 
All property's elements contained in the source file, located with the project xml file.

Title:
Check option: IGNORE_DIGITS

Steps:
1. Get data from the source file through Groovy script.
2. Write each received property's pieces to the particular field in test case's property.
3. Perform a comparison with the expected result received from the source property file.

Expected result:
Comparison is responded to the expected result from the source file.

Postcondition:
Clean test case's property space.</con:description><con:settings/><con:testStep type="request" name="OptionIGNORE_DIGITS" id="693f5c65-b058-4e4e-a0f8-9669e3a7d10e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="OptionIGNORE_DIGITS" id="7d70338f-0563-42b3-8c7b-c4bfc444f84a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">
   <soapenv:Header/>
   <soapenv:Body>
      <spel:CheckTextRequest lang="${#TestCase#lang}" options="${#TestCase#options}" format="">
         <spel:text>${#TestCase#inputText}</spel:text>
      </spel:CheckTextRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8e9ca762-e465-404c-af9a-87e8f33fbebc"/><con:assertion type="Simple Contains" id="dbf9fbfb-c577-43f2-b54e-2274ac02ad7d" name="Contains"><con:configuration><token>${#TestCase#expectedResult}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b1995600-3979-43d4-9629-f35102e2d017" name="assertion_word"><con:configuration><scriptText>def expected = context.expand('${#TestCase#expectedResult}')

def xmlObjResp = new XmlSlurper().parseText(messageExchange.getResponseContent())

def actual = xmlObjResp.Body.CheckTextResponse.SpellResult.error.word

assert actual == expected
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:setupScript>//testRunner.runTestStepByName("runTestCase")</con:setupScript><con:tearDownScript/><con:properties><con:property><con:name>lang</con:name><con:value>ru </con:value></con:property><con:property><con:name>options</con:name><con:value>2</con:value></con:property><con:property><con:name>inputText</con:name><con:value>авп17ч4534 Россxия</con:value></con:property><con:property><con:name>expectedResult</con:name><con:value>Россxия</con:value></con:property></con:properties></con:testCase><con:testCase id="8262fdb4-f75c-4cf4-973c-3e14ef865296" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CheckOptionFIND_REPEAT_WORDS_TestCase" searchProperties="true"><con:description>
Precondition: 
All property's elements contained in the source file, located with the project xml file.

Title:
CheckOptionFIND_REPEAT_WORDS_TestCase

Steps:
1. Get data from the source file through Groovy script.
2. Write each received property's pieces to the particular field in test case's property.
3. Perform a comparison with the expected result received from the source property file.

Expected result:
Comparison is responded to the expected result from the source file.

Postcondition:
Clean test case's property space.</con:description><con:settings/><con:testStep type="request" name="SeconOption" id="f8ec3b05-e6ff-48fb-b924-f216b03898b7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SpellServiceSoap</con:interface><con:operation>checkText</con:operation><con:request name="SeconOption" id="f888b7bb-33be-4f6e-b02e-e6affbc9d5f3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://speller.yandex.net/services/spellservice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:spel="http://speller.yandex.net/services/spellservice">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <spel:CheckTextRequest lang="${#Global#lang}" options="2" format="">
         <spel:text>${#TestCase#input}</spel:text>\r
      </spel:CheckTextRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="efe358ad-7541-4550-b4c8-6bbc3c5e4fcc"/><con:assertion type="Schema Compliance" id="f394a268-2396-4c7f-824f-5485aa0e28ad" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:tearDownScript>//Clear property space
//testRunner.testCase.getTestStepByName("Properties").removeProperty("lang")
//testRunner.testCase.getTestStepByName("Properties").removeProperty("options")
//testRunner.testCase.getTestStepByName("Properties").removeProperty("inputText")
//testRunner.testCase.getTestStepByName("Properties").removeProperty("expectedResult")</con:tearDownScript><con:properties><con:property><con:name>input</con:name><con:value>hello hello</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>options</con:name><con:value>2</con:value></con:property><con:property><con:name>inputText</con:name><con:value>I flew to to Cyprus</con:value></con:property><con:property><con:name>expectedResult</con:name><con:value>to</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>expectedResult</con:name><con:value> Hello</con:value></con:property><con:property><con:name>inputText</con:name><con:value>Helli</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>